# Makefile for building Lind-wasm project

# Variables
CLANG_VERSION=16.0.4
CLANG_ARCHIVE=clang+llvm-$(CLANG_VERSION)-x86_64-linux-gnu-ubuntu-22.04.tar.xz
CLANG_URL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$(CLANG_VERSION)/$(CLANG_ARCHIVE)
CLANG_DIR=$(HOME)/clang+llvm-$(CLANG_VERSION)-x86_64-linux-gnu-ubuntu-22.04

LIND_WASM_REPO=https://github.com/Lind-Project/lind-wasm.git
LIND_WASM_DIR=$(HOME)/lind-wasm

RUST_VERSION=nightly

GLIBC_DIR=$(LIND_WASM_DIR)/glibc
SAFEPOSIX_DIR=$(LIND_WASM_DIR)/safeposix-rust
RAW_POSIX_DIR=$(LIND_WASM_DIR)/RawPOSIX
WASMTIME_DIR=$(LIND_WASM_DIR)/wasmtime
SYSROOT_DIR=$(GLIBC_DIR)/sysroot
BUILD_DIR=$(GLIBC_DIR)/build
INCLUDE_DIR=$(GLIBC_DIR)/target/include
CRT1_SRC=$(GLIBC_DIR)/lind_syscall/crt1.o
LIND_SYSCALL_SRC=$(GLIBC_DIR)/lind_syscall/lind_syscall.o
OUTPUT_ARCHIVE=$(SYSROOT_DIR)/lib/wasm32-wasi/libc.a

# Targets
all: build-glibc build-safeposix build-rawposix build-wasmtime modify_stubs gen-sysroot

# Configure and build glibc for WASI
build_glibc:
	@echo "Configuring glibc for WASI..."
	@cd $(GLIBC_DIR) && git switch add_syscall_merge
	@mv $(GLIBC_DIR)/wasi $(CLANG_DIR)/lib/clang/16/lib
	@echo '#!/bin/bash
set -e
BUILDDIR=build
mkdir -p $$BUILDDIR
cd $$BUILDDIR
../configure --disable-werror --disable-hidden-plt --with-headers=/usr/i686-linux-gnu/include --prefix=$(GLIBC_DIR)/target --host=i686-linux-gnu --build=i686-linux-gnu \
    CFLAGS=" -O2 -g" \
    CC="$(CLANG_DIR)/bin/clang-16 --target=wasm32-unknown-wasi -v -Wno-int-conversion"' > $(GLIBC_DIR)/config.sh
	@chmod +x $(GLIBC_DIR)/config.sh
	@cd $(GLIBC_DIR) && ./config.sh
	@cd $(BUILD_DIR) && make --keep-going -j4 || true
	@cd $(BUILD_DIR) && make install --keep-going || true

build-safeposix:
	@echo "Building safeposix..."
	@cd $(SAFEPOSIX_DIR) && git switch 3i-dev && cargo build

build-rawposix:
	@echo "Building rawposix..."
	@cd $(RAW_POSIX_DIR) && git switch add_syscall_merge && cargo build

build-wasmtime:
	@echo "Building wasmtime..."
	@cd $(WASMTIME_DIR) && git switch multi-process && \
	cp $(SAFEPOSIX_DIR)/target/debug/librustposix.so $(WASMTIME_DIR)/crates/rustposix && \
	git submodule update --init && \
	cd $(WASMTIME_DIR)/crates/rustposix/src && \
	rm -r build.rs && \
	echo 'fn main() { println!("cargo:rustc-link-search=native=$(WASMTIME_DIR)/crates/rustposix"); println!("cargo:rustc-link-lib=dylib=rustposix"); }' > build.rs && \
	cd $(WASMTIME_DIR) && \
	export LD_LIBRARY_PATH=$(WASMTIME_DIR)/crates/rustposix:$$LD_LIBRARY_PATH && \
	cargo build

# Modify stubs.h
modify_stubs:
	@echo "Modifying stubs.h..."
	@cd $(GLIBC_DIR)/target/include/gnu && \
	rm -f stubs.h && \
	echo '/* This file is automatically generated. This file selects the right generated file of `__stub_FUNCTION` macros based on the architecture being compiled for. */
#if defined __x86_64__ && defined __LP64__
# include <gnu/stubs-64.h>
#endif
#if defined __x86_64__ && defined __ILP32__
# include <gnu/stubs-x32.h>
#endif
' > stubs.h

gen-sysroot:
	@echo "Generating wasm sysroot..."
	@rm -rf "$(SYSROOT_DIR)"
	@object_files=$$(find "$(BUILD_DIR)" -type f -name "*.o" ! \( -name "stamp.o" -o -name "argp-pvh.o" -o -name "repertoire.o" \)) && \
	object_files="$$object_files $(LIND_SYSCALL_SRC)" && \
	$(CLANG_DIR)/bin/llvm-ar rcs "$(OUTPUT_ARCHIVE)" $$object_files && \
	mkdir -p "$(SYSROOT_DIR)/include/wasm32-wasi" "$(SYSROOT_DIR)/lib/wasm32-wasi" && \
	cp -r "$(INCLUDE_DIR)"/* "$(SYSROOT_DIR)/include/wasm32-wasi/" && \
	cp "$(CRT1_SRC)" "$(SYSROOT_DIR)/lib/wasm32-wasi/"

# Utility target
clean:
	@echo "Cleaning up build directories..."
	@rm -rf $(BUILD_DIR) $(SYSROOT_DIR)
