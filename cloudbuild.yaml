steps:
  # Authenticate with Docker
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - 'docker login --username=$$USERNAME --password=$$PASSWORD'
    secretEnv:
      - 'USERNAME'
      - 'PASSWORD'

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Check glibc Changes'
    entrypoint: bash
    args:
      - '-c'
      - |
        cd /workspace   
        git fetch origin "$BRANCH_NAME"
        LAST_COMMIT=$(git log -n 1 --pretty=format:%H origin/"$BRANCH_NAME" -- src/lib)
        echo "last commit with glibc change: $$LAST_COMMIT"
        if [ -n "$$LAST_COMMIT" ]; then
          echo "LAST_COMMIT=$$LAST_COMMIT" >> /workspace/env.txt
          if gsutil -q stat gs://test_result_json_bucket/glibc/$$LAST_COMMIT/glibc_build.tar.gz; then
            echo "glibc cache found for $$LAST_COMMIT"
            gsutil cp gs://test_result_json_bucket/glibc/$$LAST_COMMIT/glibc_build.tar.gz /workspace
            echo "GLIBC_TAR_CACHE=true" >> /workspace/env.txt
          else
            echo "glibc cache not found for $$LAST_COMMIT"
            echo "GLIBC_TAR_CACHE=false" >> /workspace/env.txt
          fi
        else
          echo "GLIBC_TAR_CACHE=false" >> /workspace/env.txt
        fi

  # Docker build with failure allowed
  - name: 'gcr.io/cloud-builders/docker'
    id: 'docker-image-build'
    allowFailure: true
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/env.txt
        docker build \
        --build-arg BRANCH_NAME=$$BRANCH_NAME \
        --build-arg GLIBC_TAR_CACHE=$$GLIBC_TAR_CACHE \
        -t $$USERNAME/lind-wasm:latest ./.devcontainer | tee /workspace/docker_build.log
        echo $$? > /workspace/docker_build_exit_code
    env:
      - 'BRANCH_NAME=$BRANCH_NAME'
    secretEnv:
      - 'USERNAME'

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'Handle Build Status'
    entrypoint: 'bash'
    secretEnv:
      - 'GITHUB_APP_PRIVATE_KEY'
      - 'GITHUB_TOKEN'
    env:
      - 'BRANCH_NAME=$BRANCH_NAME'
      - 'BUILD_ID=$BUILD_ID'
      - '_PR_NUMBER=$_PR_NUMBER'
      - 'REPO_FULL_NAME=$REPO_FULL_NAME'
      - 'COMMIT_SHA=$COMMIT_SHA'
    args:
      - '-c'
      - |
          EXIT_CODE=$$(cat /workspace/docker_build_exit_code || echo 0)

          apt-get update && apt-get install -y python3 python3-pip python3-venv

          python3 -m venv /tmp/venv
          . /tmp/venv/bin/activate

          pip install "PyJWT[crypto]" google-cloud-secret-manager requests
          python generate_token_and_upload_secret.py

          GITHUB_TOKEN=$$(gcloud secrets versions access latest --secret=github-bot-token)
          if [ "$$EXIT_CODE" -eq 0 ]; then
            curl -X POST -H "Authorization: Bearer $$GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            -d "$$(printf '{"body":"**Commit %s: Build Success**"}' "$COMMIT_SHA")" \
            "https://api.github.com/repos/$REPO_FULL_NAME/issues/$_PR_NUMBER/comments"
          else
            gsutil cp /workspace/docker_build.log gs://test_result_json_bucket/$$BRANCH_NAME/$$BUILD_ID/docker_build.log
            gsutil acl ch -u allUsers:R gs://test_result_json_bucket/$$BRANCH_NAME/$$BUILD_ID/docker_build.log
            curl -X POST -H "Authorization: Bearer $$GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            -d "$(printf '{"body":"**Commit %s: Build Failed**\\n\\n[View Log](https://storage.googleapis.com/test_result_json_bucket/%s/%s/docker_build.log)"}' \
                  "$$COMMIT_SHA" \
                  "$$BRANCH_NAME" \
                  "$$BUILD_ID" \
              )" \
            "https://api.github.com/repos/$REPO_FULL_NAME/issues/$_PR_NUMBER/comments"
          fi
  # Run the container and execute the bazel test run command
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker run --name lind_test_container \
          -e BRANCH_NAME=$BRANCH_NAME \
          $$USERNAME/lind-wasm:latest \
          bazel run //:python_tests &&

        docker cp lind_test_container:/home/lind/lind-wasm/src/RawPOSIX/tmp/results.json /workspace/results.json &&
        docker cp lind_test_container:/home/lind/lind-wasm/src/RawPOSIX/tmp/report.html /workspace/report.html &&

        docker rm -fv lind_test_container
    env:
      - 'BRANCH_NAME=$BRANCH_NAME'
    secretEnv:
      - 'USERNAME'

  # Push test result to bucket
  - name: 'gcr.io/cloud-builders/gsutil'
    entrypoint: 'bash'
    env:
      - 'BRANCH_NAME=$BRANCH_NAME'
      - 'BUILD_ID=$BUILD_ID'
      - 'COMMIT_SHA=$COMMIT_SHA'
    args:
      - '-c'
      - |
        gsutil cp /workspace/results.json gs://test_result_json_bucket/$BRANCH_NAME/$BUILD_ID/results.json && 
        gsutil cp /workspace/report.html gs://test_result_json_bucket/$BRANCH_NAME/$BUILD_ID/report.html && 
        gsutil acl ch -u allUsers:R gs://test_result_json_bucket/$BRANCH_NAME/$BUILD_ID/results.json &&
        gsutil acl ch -u allUsers:R gs://test_result_json_bucket/$BRANCH_NAME/$BUILD_ID/report.html  
        source /workspace/env.txt
        if [ "$$GLIBC_TAR_CACHE" != "true" ]; then
          tar czf /workspace/glibc_build.tar.gz -C src/glibc build
          gsutil cp /workspace/glibc_build.tar.gz gs://test_result_json_bucket/glibc/$$LAST_COMMIT/glibc_build.tar.gz 
        fi      

  # Refresh GitHub token again before final PR comment
  - name: 'python:3.11-slim'
    id: 'refresh-github-token-before-comment'
    entrypoint: bash
    secretEnv:
      - "GITHUB_APP_PRIVATE_KEY"
    args:
      - '-c'
      - |
        pip install "PyJWT[crypto]" google-cloud-secret-manager requests
        python generate_token_and_upload_secret.py

  # Final GitHub PR comment with refreshed token
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    secretEnv:
      - 'GITHUB_TOKEN'
    env:
      - 'BRANCH_NAME=$BRANCH_NAME'
      - 'BUILD_ID=$BUILD_ID'
      - '_PR_NUMBER=$_PR_NUMBER'
      - 'REPO_FULL_NAME=$REPO_FULL_NAME'
    args:
      - '-c'
      - | 
          curl -X POST -H "Authorization: Bearer $$GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
             -d "$(printf '{"body":"**Test Report**\\n\\n**[View HTML Report](https://storage.googleapis.com/test_result_json_bucket/%s/%s/report.html)**\\n**[View JSON Results](https://storage.googleapis.com/test_result_json_bucket/%s/%s/results.json)**"}' "$BRANCH_NAME" "$BUILD_ID" "$BRANCH_NAME" "$BUILD_ID")" \
          "https://api.github.com/repos/$REPO_FULL_NAME/issues/$_PR_NUMBER/comments"

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'


availableSecrets:
  secretManager:
    - versionName: projects/1049119266483/secrets/docker-password/versions/1
      env: 'PASSWORD'
    - versionName: projects/1049119266483/secrets/docker-username/versions/1
      env: 'USERNAME'
    - versionName: projects/1049119266483/secrets/github-bot-token/versions/latest
      env: 'GITHUB_TOKEN'
    - versionName: projects/1049119266483/secrets/github-app-private-key/versions/1
      env: 'GITHUB_APP_PRIVATE_KEY'
