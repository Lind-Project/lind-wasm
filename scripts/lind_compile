#!/usr/bin/env bash
set -Eeuo pipefail

# Cross-compile passed .c file to .wasm and .cwasm files
#
# Usage:
#   lind_compile /path/to/program.c
#   ./scripts/lind_compile ./tests/unit/printf.c
#
# No assumption about current working directory.

# --- repo root discovery (env var -> script dir -> git) ---
if [[ -n "${LIND_WASM_ROOT:-}" && -d "${LIND_WASM_ROOT}" ]]; then
  REPO_ROOT="${LIND_WASM_ROOT}"
else
  SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd)"
  if [[ -f "${SCRIPT_DIR}/../Makefile" ]]; then
    REPO_ROOT="$(cd -- "${SCRIPT_DIR}/.." && pwd)"
  else
    if command -v git >/dev/null 2>&1; then
      REPO_ROOT="$(git rev-parse --show-toplevel 2>/dev/null || true)"
    else
      REPO_ROOT=""
    fi
  fi
fi

if [[ -z "${REPO_ROOT}" || ! -d "${REPO_ROOT}" ]]; then
  echo "ERROR: Could not locate lind-wasm repo root." >&2
  echo "Hint: export LIND_WASM_ROOT=/path/to/lind-wasm" >&2
  exit 2
fi

# --- args & path normalization ---
if [[ "$#" -ne 1 || "${1##*.}" != "c" ]]; then
  echo "usage: $(basename "$0") </path/to/file.c>" >&2
  exit 2
fi

# Normalize input path to absolute
if [[ "$1" = /* ]]; then
  SRC="$1"
else
  SRC="$PWD/$1"
fi
SRC_DIR="$(cd -- "$(dirname -- "$SRC")" && pwd)"
SRC_BASE="$(basename -- "$SRC")"
SRC="${SRC_DIR}/${SRC_BASE}"

[[ -f "$SRC" ]] || { echo "error: source not found: $SRC" >&2; exit 2; }

OUT_WASM="${SRC%.c}.wasm"
OUT_CWASM="${SRC%.c}.cwasm"

# --- tool paths & quick checks (anchored to repo) ---
CLANG_BIN="clang"  # must be on PATH
WASM_OPT_BIN="${REPO_ROOT}/tools/binaryen/bin/wasm-opt"
WASMTIME_BIN="${REPO_ROOT}/src/wasmtime/target/release/wasmtime"
SYSROOT="${REPO_ROOT}/src/glibc/sysroot"

command -v "${CLANG_BIN}" >/dev/null 2>&1 || { echo "error: clang not found on PATH" >&2; exit 2; }
[[ -x "${WASM_OPT_BIN}" ]] || { echo "error: wasm-opt not found at ${WASM_OPT_BIN}" >&2; exit 2; }
[[ -x "${WASMTIME_BIN}" ]] || { echo "error: wasmtime not found at ${WASMTIME_BIN}" >&2; exit 2; }
[[ -d "${SYSROOT}" ]] || { echo "error: sysroot missing at ${SYSROOT}" >&2; exit 2; }

# --- compile ---
"${CLANG_BIN}" --sysroot="${SYSROOT}" \
  -pthread --target=wasm32-unknown-wasi \
  -Wl,--import-memory,--export-memory,--max-memory=67108864,--export="__stack_pointer",--export=__stack_low \
  "$SRC" -g -O0 -o "${OUT_WASM}"

# --- optimize ---
"${WASM_OPT_BIN}" --epoch-injection --asyncify -O2 --debuginfo "${OUT_WASM}" -o "${OUT_WASM}"

# --- precompile ---
"${WASMTIME_BIN}" compile "${OUT_WASM}" -o "${OUT_CWASM}"

echo "OK: ${OUT_WASM}"
echo "OK: ${OUT_CWASM}"
