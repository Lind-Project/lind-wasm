# syntax=docker/dockerfile:1.7-labs
# NOTE: use non-stable syntax for convenient --parents option in COPY command

# Multi-stage Dockerfile for lind-wasm end-to-end testing and image creation
#
# - Installs build dependencies
# - Builds wasmtime, glibc and sysroot for clang cross-compilation
# - A. Runs end-to-end tests (default)
# - B. Creates Docker image with lind-wasm toolchain
#
# NOTE: The 'test' stage (A) runs end-to-end tests on `docker build`, and is
# optimized for Docker build time and caching. It is not meant for `docker
# run`. Use the 'release' stage (B) to create an image that includes the full
# lind-wasm toolchain, e.g. to run demos, tests, experiments, etc.
#
# Usage A (test):
#     docker build --platform=linux/amd64 -f scripts/Dockerfile.e2e .
#
# Usage B (create and run image):
#     docker build --platform=linux/amd64 -f scripts/Dockerfile.e2e --target release .
#     docker run --platform=linux/amd64 -it release /bin/bash

# Install build dependencies
# NOTE: We install dependencies for multiple stages at once, to save RUN time
# and cache layers. Details:
# - glibc dependencies as per src/glibc/INSTALL
# - gcc skipped in favor of clang
# - libc6-dev-i386-cross required for wasi cross-compilation with clang
# - build-essential, ca-certificates, curl, libxml2 needed by rust and clang
FROM ubuntu:22.04 AS base
RUN apt-get update && \
    apt-get install -y --no-install-recommends -qq \
        binutils \
        bison \
        build-essential \
        ca-certificates \
        curl \
        gawk \
        libc6-dev-i386-cross \
        libxml2 \
        make \
        python3 \
        sed \
    && rm -rf /var/lib/apt/lists/*

# Install rust and build wasmtime
FROM base as build-wasmtime
# NOTE: pinning known-to-work nightly-2025-06-01 (see #242)
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | \
    sh -s -- -y --default-toolchain nightly-2025-06-01
ENV PATH="/root/.cargo/bin:${PATH}"
COPY --parents src/wasmtime src/RawPOSIX src/fdtables src/sysdefs .
# Build wasmtime with `--release` flag for faster tests
# NOTE: `ln` workaround required for hard-coded paths in test tools (lind_config.sh)
RUN cargo build --manifest-path src/wasmtime/Cargo.toml --release && \
    (cd src/wasmtime/target && mkdir -p debug && ln -sf ../release/wasmtime debug)

# Install clang, build glibc and generate sysroot
FROM base AS build-glibc
# NOTE: We `curl | tar` in spite of Docker best practices to save cache layers
RUN curl -sL https://github.com/llvm/llvm-project/releases/download/llvmorg-16.0.4/clang+llvm-16.0.4-x86_64-linux-gnu-ubuntu-22.04.tar.xz | \
       tar -xvJ
COPY --parents scripts/make_glibc_and_sysroot.sh src/glibc .
RUN ./scripts/make_glibc_and_sysroot.sh

# Build Docker image that includes the full lind-wasm toolchain
# NOTE: Lind-wasm source code is not included
FROM base AS release
COPY --from=build-wasmtime --parents  src/wasmtime/target .
COPY --from=build-glibc --parents \
    clang+llvm-16.0.4-x86_64-linux-gnu-ubuntu-22.04 src/glibc/sysroot .
COPY --parents scripts tests tools skip_test_cases.txt .

# Run all tests, print results, and exit with 1, if any test fails; 0 otherwise
FROM base AS test
COPY --parents scripts tests tools skip_test_cases.txt .
# NOTE: Build artifacts from prior stages are only mounted, to save COPY time
# and cache layers. This means they are not preserved in the resulting image.
# NOTE: `grep` workaround required for lack of meaningful exit code in wasmtestreport.py
RUN --mount=from=build-wasmtime,source=src/wasmtime/target,destination=src/wasmtime/target \
    --mount=from=build-glibc,source=src/glibc/sysroot,destination=src/glibc/sysroot \
    --mount=from=build-glibc,source=clang+llvm-16.0.4-x86_64-linux-gnu-ubuntu-22.04,destination=clang+llvm-16.0.4-x86_64-linux-gnu-ubuntu-22.04 \
    LIND_WASM_BASE=/  LIND_FS_ROOT=/src/RawPOSIX/tmp ./scripts/wasmtestreport.py && \
    cat results.json && \
    ! grep '"number_of_failures": [^0]' results.json
