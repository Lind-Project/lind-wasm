# syntax=docker/dockerfile:1.7-labs
# NOTE: Enable Docker Labs syntax for future convenience

# Base image for development and debugging with perf and gdb support
#
# - Installs standard build tools and debugging utilities
# - Assumes container is run with --privileged for perf to function
#
# Usage:
#     docker build -f Dockerfile.dev -t devtest .
#     docker run --privileged -it devtest /bin/bash

FROM ubuntu:22.04 AS deps

# --- Build arguments ---
ARG USERNAME=lind
ARG BRANCH_NAME=main
ARG LLVM_VERSION="llvmorg-18.1.8"
ARG CLANG_PACKAGE="clang+llvm-18.1.8-x86_64-linux-gnu-ubuntu-18.04"
# --- System setup ---
ENV DEBIAN_FRONTEND=noninteractive

# Install base tools
RUN apt-get update && apt-get install -y --no-install-recommends -qq \
    binutils \
    bison \
    build-essential \
    ca-certificates \
    curl \
    gawk \
    git \
    gnupg \
    libc6-dev-i386-cross \
    libxml2 \
    make \
    python3 \
    sed \
    sudo \
    unzip \
    zip \
    vim \
    wget \
    openssl \
    libssl-dev \    
    gdb \
    linux-tools-common \
    linux-tools-generic \
    && rm -rf /var/lib/apt/lists/*

RUN wget http://security.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.3-2ubuntu0.1_amd64.deb && \
    apt install ./libtinfo5_6.3-2ubuntu0.1_amd64.deb

# --- Create user ---
RUN groupadd --gid 1000 ${USERNAME} && \
    useradd --uid 1000 --gid ${USERNAME} --create-home --shell /bin/bash ${USERNAME} && \
    echo "${USERNAME} ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

RUN mkdir -p /home/${USERNAME}/lind-wasm     

# --- Install clang ---
RUN curl -sL https://github.com/llvm/llvm-project/releases/download/${LLVM_VERSION}/${CLANG_PACKAGE}.tar.xz | \
    tar -xJ -C /home/${USERNAME}/lind-wasm 
ENV PATH="/home/${USERNAME}/lind-wasm/${CLANG_PACKAGE}/bin:${PATH}"

FROM deps AS base

# --- Patch glibc wasi includes into clang dir and fix permissions ---
COPY src/glibc/wasi \
         /home/${USERNAME}/lind-wasm/${CLANG_PACKAGE}/lib/clang/18/lib
RUN chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}/

# --- Switch to user ---
USER ${USERNAME}
WORKDIR /home/${USERNAME}/lind-wasm

# --- Install Rust as user ---
ENV CARGO_HOME=/home/${USERNAME}/.cargo
ENV RUSTUP_HOME=/home/${USERNAME}/.rustup
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | \
    sh -s -- -y --default-toolchain nightly-2025-06-01

ENV CLANG="/home/${USERNAME}/lind-wasm/${CLANG_PACKAGE}"
ENV PATH="/home/${USERNAME}/.cargo/bin:/usr/local/bin:${PATH}"

ENV CLANG="/home/${USERNAME}/lind-wasm/${CLANG_PACKAGE}"
ENV PATH="${CLANG}/bin:/home/${USERNAME}/.cargo/bin:/usr/local/bin:${PATH}"


FROM base AS build-wasmtime
ENV CARGO_HOME=/home/${USERNAME}/.cargo
COPY --chown=${USERNAME}:${USERNAME} --parents src/wasmtime src/RawPOSIX src/fdtables src/sysdefs Makefile .

# --- Pre-create user-owned cache dirs (for BuildKit cache mounts) ---
RUN install -d -o ${USERNAME} -g ${USERNAME} ${CARGO_HOME}/registry ${CARGO_HOME}/git

RUN mkdir -p /home/${USERNAME}/bin && \
    printf '%s\n' '#!/usr/bin/env bash' \
                  'real="/home/'"${USERNAME}"'/.cargo/bin/cargo"' \
                  'if [[ "$1" == "build" && "$*" != *"--features"* && "$*" == *"src/wasmtime/Cargo.toml"* ]]; then' \
                  '  exec "$real" "$@" --features component-model' \
                  'else' \
                  '  exec "$real" "$@"' \
                  'fi' \
      > /home/${USERNAME}/bin/cargo && \
    chmod +x /home/${USERNAME}/bin/cargo
ENV PATH="/home/${USERNAME}/bin:${PATH}"

# --- Build with user-owned cache mounts; Make will call our wrapper ---
RUN --mount=type=cache,target=${CARGO_HOME}/registry,uid=1000,gid=1000 \
    --mount=type=cache,target=${CARGO_HOME}/git,uid=1000,gid=1000 \
    make wasmtime

FROM base as build-glibc
# COPY --chown=${USERNAME}:${USERNAME} --parents scripts/make_glibc_and_sysroot.sh src/glibc Makefile .
# RUN --mount=type=cache,target=/home/${USERNAME}/.cargo/registry,uid=1000,gid=1000 \
#     --mount=type=cache,target=/home/${USERNAME}/.cargo/git,uid=1000,gid=1000 \
#     make sysroot


ARG REFRESH=2025-08-19-sasffaasdturetyuassasassf90a8sf09uasf
COPY --chown=${USERNAME}:${USERNAME} --parents scripts/make_glibc_and_sysroot-test.sh src/glibc Makefile .

RUN chmod +x scripts/make_glibc_and_sysroot-test.sh \
 && make sysroot-test

# FROM base AS release
# COPY --chown=${USERNAME}:${USERNAME} --from=build-wasmtime --parents  src/wasmtime/target .
# COPY --chown=${USERNAME}:${USERNAME} --from=build-glibc   --parents  src/glibc/sysroot .
# COPY --chown=${USERNAME}:${USERNAME} --parents scripts tests tools skip_test_cases.txt .


FROM base AS test
COPY --chown=${USERNAME}:${USERNAME} --parents scripts tests tools skip_test_cases.txt Makefile .
# NOTE: Build artifacts from prior stages are only mounted, to save COPY time
# and cache layers. This means they are not preserved in the resulting image.
RUN --mount=from=build-wasmtime,source=src/wasmtime/target,destination=src/wasmtime/target \
    --mount=from=build-glibc,source=src/glibc/sysroot,destination=src/glibc/sysroot \
    make test

